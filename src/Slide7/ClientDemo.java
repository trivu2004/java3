package Slide7;


import java.io.*;
import java.net.*;
import javax.swing.*;

/**
 *
 * @author Tu Ech
 */
public class ClientDemo extends javax.swing.JFrame {
    int port;
    Socket client;
    OutputStream out;
    PrintStream ps;
    public ClientDemo() {
        initComponents();
        btnSend.setEnabled(false);
    }
    //......
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    txtPort = new javax.swing.JTextField();
    btnConnect = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    txtServer = new javax.swing.JTextArea();
    txtSend = new javax.swing.JTextField();
    btnSend = new javax.swing.JButton();
    jLabel2 = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Client");

    jLabel1.setText("Port No.");

    txtPort.setText("9998");

    btnConnect.setText("Connect");
    btnConnect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnConnectActionPerformed(evt);
      }
    });

    txtServer.setColumns(20);
    txtServer.setEditable(false);
    txtServer.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
    txtServer.setForeground(new java.awt.Color(153, 0, 0));
    txtServer.setRows(5);
    jScrollPane1.setViewportView(txtServer);

    txtSend.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

    btnSend.setText("Send");
    btnSend.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnSendActionPerformed(evt);
      }
    });

    jLabel2.setText("Server");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(20, 20, 20)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel2)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
            .addGroup(layout.createSequentialGroup()
              .addComponent(jLabel1)
              .addGap(38, 38, 38)
              .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGap(18, 18, 18)
              .addComponent(btnConnect))
            .addGroup(layout.createSequentialGroup()
              .addComponent(txtSend, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
              .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1)))
        .addContainerGap(21, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jLabel1)
              .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(btnConnect))
            .addGap(27, 27, 27)
            .addComponent(txtSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(btnSend))
        .addGap(73, 73, 73)
        .addComponent(jLabel2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(36, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
      try {
        port = Integer.parseInt(txtPort.getText().trim());
        client = new Socket("127.0.0.1",port);
        out = client.getOutputStream();
        ps = new PrintStream(out);

        btnConnect.setEnabled(false);
        btnSend.setEnabled(true);
        Thread t = new Thread(new ClientThread(client, txtServer));
        t.start();

      } catch (Exception ex) {
        ex.printStackTrace();
      }
}//GEN-LAST:event_btnConnectActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
      ps.println(txtSend.getText().trim());
    }//GEN-LAST:event_btnSendActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientDemo().setVisible(true);
            }
        });
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnConnect;
  private javax.swing.JButton btnSend;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextField txtPort;
  private javax.swing.JTextField txtSend;
  private javax.swing.JTextArea txtServer;
  // End of variables declaration//GEN-END:variables

}

class ClientThread implements Runnable{
  Socket client;
  JTextArea txtServer;
  InputStream in;
  BufferedInputStream bi;
  DataInputStream dis;
  OutputStream out;
  public ClientThread(Socket client, JTextArea txtServer){
    this.client = client;
    this.txtServer = txtServer;
    try{
      in = client.getInputStream();
      bi = new BufferedInputStream(in);
      dis = new DataInputStream(bi);
    }catch(Exception e){
      e.printStackTrace();
    }
  }
  public void run(){
    String s="";
    while(true){
      try {
        s = dis.readLine();
        txtServer.append(s+"\n\r") ;
      } catch (IOException ex) {
        ex.printStackTrace();
      }
    }
  }
}
